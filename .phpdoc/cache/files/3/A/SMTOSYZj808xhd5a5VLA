1700922109
waR3U4bTeM%3A57af5f38b0353d9cf8429d7fa8eaa32e-25bc3215f4f554e4b67012ad1fd9960f
s:10076:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxNDp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBkb2NCbG9jayI7TjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGhhc2giO3M6MzI6IjI1YmMzMjE1ZjRmNTU0ZTRiNjcwMTJhZDFmZDk5NjBmIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWUiO3M6MTQ6InNob3cuYmxhZGUucGhwIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHBhdGgiO3M6Mzc6InJlc291cmNlcy92aWV3cy9ldmVudHMvc2hvdy5ibGFkZS5waHAiO3M6NDE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAc291cmNlIjtzOjY2Mzc6Ijx4LWxheW91dD4NCiAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPg0KICAgICAgICA8aDE+e3skZXZlbnQtPm5hbWV9fTwvaDE+DQogICAgICAgIDxoND5aZWl0cmF1bToge3skZXZlbnQtPnN0YXJ0X2RhdGV9fSAtICB7eyRldmVudC0+ZW5kX2RhdGV9fTwvaDQ+DQogICAgICAgIDxoND5aYWhsdW5nc2FydDoge3skZXZlbnQtPmNhc2hfcGF5ID8gJ0JhcnphaGx1bmcnIDogJ0JhcmdlbGRsb3MnfX08L2g0Pg0KICAgICAgICBAY2FuKCdlZGl0LWV2ZW50JykNCiAgICAgICAgICAgIDxhIGhyZWY9Int7cm91dGUoJ0VESVRfRVZFTlQnLCAkZXZlbnQpfX0iPjxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5Ij4NCiAgICAgICAgICAgICAgICBFZGl0DQogICAgICAgICAgICA8L2J1dHRvbj48L2E+DQogICAgICAgIEBlbmRjYW4NCiAgICAgICAgQGNhbignZGVsZXRlLWV2ZW50JykNCiAgICAgICAgPGEgaHJlZj0ie3tyb3V0ZSgnREVTVFJPWV9FVkVOVCcsICRldmVudCl9fSI+PGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiPg0KICAgICAgICAgICAgTMO2c2NoZW4NCiAgICAgICAgPC9idXR0b24+PC9hPg0KICAgICAgICBAZW5kY2FuDQogICAgICAgIDxicj48YnI+DQogICAgICAgIDx1bCBjbGFzcz0ibmF2IG5hdi10YWJzIiBpZD0ibXlUYWIiIHJvbGU9InRhYmxpc3QiPg0KICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSIgcm9sZT0icHJlc2VudGF0aW9uIj4NCiAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0ibmF2LWxpbmsgYWN0aXZlIiBpZD0iaGlzdG9yeS10YWIiIGRhdGEtYnMtdG9nZ2xlPSJ0YWIiIGRhdGEtYnMtdGFyZ2V0PSIjaGlzdG9yeSIgdHlwZT0iYnV0dG9uIiByb2xlPSJ0YWIiIGFyaWEtY29udHJvbHM9Imhpc3RvcnkiIGFyaWEtc2VsZWN0ZWQ9InRydWUiPkhpc3RvcmllPC9idXR0b24+DQogICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSIgcm9sZT0icHJlc2VudGF0aW9uIj4NCiAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0ibmF2LWxpbmsiIGlkPSJwcm90b2tvbGwtdGFiIiBkYXRhLWJzLXRvZ2dsZT0idGFiIiBkYXRhLWJzLXRhcmdldD0iI3Byb3Rva29sbCIgdHlwZT0iYnV0dG9uIiByb2xlPSJ0YWIiIGFyaWEtY29udHJvbHM9InByb3Rva29sbCIgYXJpYS1zZWxlY3RlZD0iZmFsc2UiPlByb3Rva29sbDwvYnV0dG9uPg0KICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgIDxsaSBjbGFzcz0ibmF2LWl0ZW0iIHJvbGU9InVzZXJzIj4NCiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJuYXYtbGluayIgaWQ9InVzZXJzLXRhYiIgZGF0YS1icy10b2dnbGU9InRhYiIgZGF0YS1icy10YXJnZXQ9IiN1c2VycyIgdHlwZT0iYnV0dG9uIiByb2xlPSJ0YWIiIGFyaWEtY29udHJvbHM9InVzZXJzIiBhcmlhLXNlbGVjdGVkPSJmYWxzZSI+QmVudXR6ZXI8L2J1dHRvbj4NCiAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICA8L3VsPg0KICAgICAgICAgIDxkaXYgY2xhc3M9InRhYi1jb250ZW50IiBpZD0ibXlUYWJDb250ZW50Ij4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InRhYi1wYW5lIGZhZGUgc2hvdyBhY3RpdmUiIGlkPSJoaXN0b3J5IiByb2xlPSJ0YWJwYW5lbCIgYXJpYS1sYWJlbGxlZGJ5PSJoaXN0b3J5LXRhYiI+DQogICAgICAgICAgICAgICAgPCEtLUhpc3RvcnkgVGFiIENvbnRlbnQgLS0+DQogICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSJ0YWJsZSI+DQogICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICA8dGg+S3VuZGU8L3RoPg0KICAgICAgICAgICAgICAgICAgICA8dGg+VmVuZG9yPC90aD4NCiAgICAgICAgICAgICAgICAgICAgPHRoPlRyYW5zYWt0aW9uPC90aD4NCiAgICAgICAgICAgICAgICAgICAgPHRoPkRhdHVtPC90aD4NCiAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgQGZvcmVhY2ggKCRldmVudC0+aGlzdG9yeXMgYXMgJGhpc3RvcnkpDQogICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+e3skaGlzdG9yeS0+Y3VzdG9tZXItPnZvcm5hbWV9fSB7eyRoaXN0b3J5LT5jdXN0b21lci0+bmFjaG5hbWV9fTwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD57eyRoaXN0b3J5LT52ZW5kb3ItPm5hbWV9fTwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD57eyRoaXN0b3J5LT50cmFuc2FjdGlvbn19PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPnt7JGhpc3RvcnktPmNyZWF0ZWRfYXR9fTwvdGQ+DQogICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgIEBlbmRmb3JlYWNoDQogICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InRhYi1wYW5lIGZhZGUiIGlkPSJwcm90b2tvbGwiIHJvbGU9InRhYnBhbmVsIiBhcmlhLWxhYmVsbGVkYnk9InByb3Rva29sbC10YWIiPg0KICAgICAgICAgICAgICAgIDwhLS0gUHJvdG9rb2xsIFRhYiBDb250ZW50IC0tPg0KICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0idGFibGUiPg0KICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dGg+QmVudXR6ZXI8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlJvbGxlPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5Ba3Rpb248L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkRhdHVtPC90aD4NCiAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICBAZm9yZWFjaCAoJGV2ZW50LT5wcm90b2tvbGxzIGFzICRwcm90b2tvbGwpDQogICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD57eyRwcm90b2tvbGwtPnVzZXItPm5hbWV9fTwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8dGQ+e3skcHJvdG9rb2xsLT5yb2xlLT5uYW1lfX08L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRkPnt7JHByb3Rva29sbC0+YWN0aW9ufX08L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRkPnt7JHByb3Rva29sbC0+Y3JlYXRlZF9hdH19PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICBAZW5kZm9yZWFjaA0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InRhYi1wYW5lIGZhZGUiIGlkPSJ1c2VycyIgcm9sZT0idGFicGFuZWwiIGFyaWEtbGFiZWxsZWRieT0idXNlcnMtdGFiIj4NCiAgICAgICAgICAgICAgICBAY2FuKCd1c2Vycy1ldmVudCcpDQogICAgICAgICAgICAgICAgPGZvcm0gYWN0aW9uPSJ7e3JvdXRlKCdVU0VSU19FVkVOVCcsICRldmVudCl9fSIgbWV0aG9kPSJwb3N0Ij4NCiAgICAgICAgICAgICAgICAgICAgQGNzcmYNCiAgICAgICAgICAgICAgICAgICAgQG1ldGhvZCgncHV0JykNCiAgICAgICAgICAgICAgICAgICAgQGlmKCR1c2VycykNCiAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSJ0YWJsZSI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPjwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPk5hbWU8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5FLU1haWw8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5WZW5kb3I8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5Sb2xsZTwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgQGZvcmVhY2ggKCR1c2VycyBhcyAkdXNlcikNCiAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIE9ubHkgdXNlcnMgd2l0aCB0aGlzIGV2ZW50IGFyZSBzZWxlY3RlZCAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICBAaWYgKCR1c2VyLT5oYXNFdmVudCgkZXZlbnQpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjxpbnB1dCB0eXBlPSJjaGVja2JveCIgaWQ9Int7JHVzZXItPmlkfX0iIG5hbWU9Int7JHVzZXItPm5hbWV9fSIgdmFsdWU9Int7JHVzZXItPmlkfX0iIGNoZWNrZWQ9InRydWUiPjwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD57eyR1c2VyLT5uYW1lfX08L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+e3skdXNlci0+ZW1haWx9fTwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD57eyR1c2VyLT52ZW5kb3IgPyAkdXNlci0+dmVuZG9yLT5uYW1lIDogJ0tlaW4gVmVuZG9yJ319PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPnt7JHVzZXItPnJvbGUtPm5hbWV9fTwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4gIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAZWxzZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjxpbnB1dCB0eXBlPSJjaGVja2JveCIgaWQ9Int7JHVzZXItPmlkfX0iIG5hbWU9Int7JHVzZXItPm5hbWV9fSIgdmFsdWU9Int7JHVzZXItPmlkfX0iPjwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD57eyR1c2VyLT5uYW1lfX08L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+e3skdXNlci0+ZW1haWx9fTwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD57eyR1c2VyLT52ZW5kb3IgPyAkdXNlci0+dmVuZG9yLT5uYW1lIDogJ0tlaW4gVmVuZG9yJ319PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPnt7JHVzZXItPnJvbGUtPm5hbWV9fTwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBlbmRpZg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICBAZW5kZm9yZWFjaA0KICAgICAgICAgICAgICAgICAgICBAZWxzZQ0KICAgICAgICAgICAgICAgICAgICAgICAgRXMgd3VyZGVuIGtlaW5lIEJlbnV0emVyIGdlZnVuZGVuLCBlcnN0ZWxsZW4gc2llIGVpbmVuIEJlbnV0emVyDQogICAgICAgICAgICAgICAgICAgIEBlbmRpZg0KICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8YnI+ICAgIA0KICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0ic3VibWl0IiB2YWx1ZT0nVXBkYXRlJz4gDQogICAgICAgICAgICA8L2Zvcm0+DQogICAgICAgICAgICBAZW5kY2FuDQogICAgICAgICAgICBAY2Fubm90KCd1c2Vycy1ldmVudCcpDQogICAgICAgICAgICBAaWYoJHVzZXJzKQ0KICAgICAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9J3RhYmxlJz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+TmFtZTwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkUtTWFpbDwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlZlbmRvcjwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlJvbGxlPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICBAZm9yZWFjaCAoJHVzZXJzIGFzICR1c2VyKQ0KICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gT25seSB1c2VycyB3aXRoIHRoaXMgZXZlbnQgYXJlIHNob3duIC0tPg0KICAgICAgICAgICAgICAgICAgICAgICAgIEBpZiAoJHVzZXItPmhhc0V2ZW50KCRldmVudCkpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+e3skdXNlci0+bmFtZX19PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPnt7JHVzZXItPmVtYWlsfX08L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+e3skdXNlci0+dmVuZG9yID8gJHVzZXItPnZlbmRvci0+bmFtZSA6ICdLZWluIFZlbmRvcid9fTwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD57eyR1c2VyLT5yb2xlLT5uYW1lfX08L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+IA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBlbmRpZiANCiAgICAgICAgICAgICAgICAgICAgICAgIEBlbmRmb3JlYWNoDQogICAgICAgICAgICAgICAgICAgIEBlbHNlDQogICAgICAgICAgICAgICAgICAgICAgICBFcyB3dXJkZW4ga2VpbmUgQmVudXR6ZXIgZ2VmdW5kZW4sIGVyc3RlbGxlbiBzaWUgZWluZW4gQmVudXR6ZXINCiAgICAgICAgICAgICAgICAgICAgQGVuZGlmDQogICAgICAgICAgICBAZW5kY2Fubm90DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8L2Rpdj4gICAgICAgICAgDQogICAgPC9kaXY+DQo8L3gtbGF5b3V0Pg0KDQoNCg0KDQoNCiAgICAiO3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAbmFtZXNwYWNlcyI7YTowOnt9czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBpbmNsdWRlcyI7YTowOnt9czo0NDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBmdW5jdGlvbnMiO2E6MDp7fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAY29uc3RhbnRzIjthOjA6e31zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGNsYXNzZXMiO2E6MDp7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAaW50ZXJmYWNlcyI7YTowOnt9czo0MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQB0cmFpdHMiO2E6MDp7fXM6NDA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAZW51bXMiO2E6MDp7fXM6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAbWV0YWRhdGEiO2E6MDp7fX0=";